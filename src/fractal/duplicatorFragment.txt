#version 140

in vec2 textureCoords;

out vec4 out_Colour;

uniform sampler2D colourTexture;
uniform float clear;
uniform float mirrorX;
uniform float mirrorY;
uniform vec3 clearColor;
uniform int colorMode;

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void nextCol(inout vec3 color)
{
	if(colorMode == 0)
	{
		color =  1-color;
	}else
	{
		vec3 colorHsv = rgb2hsv(color);
		colorHsv.x+=0.47;
		if(colorHsv.x>1)colorHsv.x-=1;
		color = hsv2rgb(colorHsv);
	}
}

void main(void)
{
	if(clear>0)
	{
		out_Colour = vec4(clearColor,1);
	}else
	{
		vec2 mirroredTextureCoords = vec2(textureCoords);
		if(mirrorX>0.5 && mirroredTextureCoords.x > 0.5)
			mirroredTextureCoords.x = 1-mirroredTextureCoords.x;
		if(mirrorY>0.5 && mirroredTextureCoords.y > 0.5)
			mirroredTextureCoords.y = 1-mirroredTextureCoords.y;
		vec3 texCol = texture(colourTexture, mirroredTextureCoords).xyz;
		nextCol(texCol);
		out_Colour = vec4(texCol, 1);
	}	
}